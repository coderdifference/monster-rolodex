{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/filter-box/filter-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","cardData","className","title","src","id","alt","motto","CardList","cards","map","card","key","FilterBox","placeholder","onChange","type","App","updateFilterTerm","filter","setState","filterString","getFilteredCards","state","toLowerCase","includes","loadCards","datasetName","Promise","resolve","fetch","process","then","response","json","this","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2UAGaA,G,YAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAChB,yBAAKC,UAAU,kBACX,wBAAIA,UAAU,cAAcD,EAASE,OACrC,yBAAKD,UAAU,aAAaE,IAAG,8BAAyBH,EAASI,GAAlC,0BAC3BC,IAAKL,EAASE,QAClB,uBAAGD,UAAU,cAAa,2CAAyBD,EAASM,UCFvDC,G,MAAW,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACtB,OAAO,yBAAKP,UAAU,aAChBO,EAAMC,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,CAAMV,SAAUU,EAAMC,IAAKD,EAAKN,WCN/BQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,SAAf,OACrB,2BAAOb,UAAU,aAAaY,YAAaA,EAAaE,KAAK,OAAOD,SAAUA,MCyCnEE,E,kDAvCb,aAAe,IAAD,8BACZ,gBAOFC,iBAAmB,SAAAC,GAAM,OAAI,EAAKC,SAAS,CAACC,aAAcF,KAR5C,EAUdG,iBAAmB,WAAO,IAAD,EACS,EAAKC,MAA7Bd,EADe,EACfA,MAAOY,EADQ,EACRA,aACf,OAAOZ,EAAMU,QAAO,SAAAR,GAAI,OAAIA,EAAKR,MAAMqB,cAAcC,SAASJ,EAAaG,mBAZ/D,EAedE,UAAY,SAAAC,GAAW,OAAI,IAAIC,SAAQ,SAAAC,GAAO,OAC1CC,MAAM,GAAD,OAAIC,mBAAJ,iBAAmCJ,EAAnC,UACFK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAvB,GACJ,EAAKW,SAAS,CAAEX,MAAOA,IACvBoB,WAjBN,EAAKN,MAAQ,CACXd,MAAO,GACPY,aAAc,IALJ,E,gEAwBZc,KAAKT,UAAU,U,+BAGP,IAAD,OACP,OACE,yBAAKxB,UAAU,OACf,wCACA,uBAAGA,UAAU,gBAAb,iEACA,kBAAC,EAAD,CAAWY,YAAY,oBAAoBC,SAAU,SAAAqB,GAAC,OAAI,EAAKlB,iBAAiBkB,EAAEC,OAAOC,UACvF,kBAAC,EAAD,CAAU7B,MAAO0B,KAAKb,0B,GAlCZiB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.08288d8f.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = ({cardData}) => \n    <div className=\"card-container\">\n        <h1 className=\"card-title\">{cardData.title}</h1>\n        <img className=\"card-image\" src={`http://robohash.org/${cardData.id}?set=set4&size=180x180`} \n            alt={cardData.title} />\n        <p className=\"card-motto\"><strong>Motto: </strong>{cardData.motto}</p>\n    </div>;","import React from 'react';\nimport { Card } from '../card/card.component'\nimport './card-list.styles.css';\n\n// Since card-list will be a display component without any state of it's own\n// we can use a functional component\nexport const CardList = ({cards}) => {\n    return <div className=\"card-list\">\n         {cards.map((card) => (\n            <Card cardData={card} key={card.id}/>\n          ))}\n    </div>;\n};\n","import React from 'react';\nimport './filter-box.styles.css';\n\nexport const FilterBox = ({placeholder, onChange}) => \n    <input className='filter-box' placeholder={placeholder} type=\"text\" onChange={onChange}/>;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { FilterBox } from \"./components/filter-box/filter-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      cards: [],\n      filterString: ''\n    };\n  }\n  updateFilterTerm = filter => this.setState({filterString: filter});\n\n  getFilteredCards = () => {\n    const { cards, filterString } = this.state;\n    return cards.filter(card => card.title.toLowerCase().includes(filterString.toLowerCase()));\n  }\n\n  loadCards = datasetName => new Promise(resolve => \n      fetch(`${process.env.PUBLIC_URL}/data/${datasetName}.json`)\n        .then(response => response.json())\n        .then(cards => {\n          this.setState({ cards: cards });\n          resolve();\n        }));\n  \n  componentDidMount() {\n    this.loadCards('cats');\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <h1>Catadex!</h1>\n      <p className=\"instructions\">Filter the card list by typing a fragment into the filter box</p>\n      <FilterBox placeholder='Filter catadex...' onChange={e => this.updateFilterTerm(e.target.value)}/>\n        <CardList cards={this.getFilteredCards()}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}